#!/bin/sh
#
# Opennet Firmware
# 
# Copyright 2010 Rene Ejury <opennet@absorb.it>
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# 	http://www.apache.org/licenses/LICENSE-2.0
# 

# include helper functions
. "${IPKG_INSTROOT:-}/usr/lib/opennet/on-helper.sh"

print_status()
{
	local current_gw
	local service_name
	local host
	local age
	local status
	local timestamp
	local active
	local distance
	local hop_count
	local offset
	local quality
	local now=$(get_time_minute)
	local format_string="%6s %-16s %18s %7s %4s\n"

	printf "$format_string" "active" "IP" "Distance/ETX" "VPN" "Age"
	get_sorted_services gw ugw | while read service_name; do
		host=$(get_service_value "$service_name" "host")
		timestamp=$(get_service_value "$service_name" "timestamp_connection_test")
		if [ -n "$timestamp" ]; then
			age=$((now-timestamp))
		else
			age=
		fi
		status=$(get_service_value "$service_name" "status")
		distance=$(get_service_value "$service_name" "distance")
		hop_count=$(get_service_value "$service_name" "hop_count")
		offset=$(get_service_value "$service_name" "offset")
		quality="$distance / $hop_count"
		[ -z "$offset" ] && offset=0
		[ "$offset" -gt 0 ] && offset="+$offset"
		[ "$offset" -ne 0 ] && quality="($offset) $quality"
		active=$(is_openvpn_service_active "$service_name" && echo "*" || true)
		printf "$format_string" "$active" "$host" "$quality" "$status" "$age"
	done
}

print_usage()
{
	echo
	echo "*** vpn_status supports the following options: ***"
	echo "toggle_auto    - toggle the autosearch mode"
	echo "toggle_etx     - toggle sort by etx or hops"
	echo "add_gw \$IP     - manually add a gateway"
	echo "del_gw \$POS    - delete a existing gateway"
	echo "move_top \$POS  - move a gateway to the top of the priority list"
	echo "status         - show all VPN gateways and their status"
	echo "start          - start the VPN tunnel"
	echo "stop           - stop the VPN tunnel"
	echo "restart        - restart the VPN tunnel"
}


_get_gateway_service_from_ip() {
	local service_name
	service_name=$(find_first_uci_section on-core services "service=ugw" "host=$host")
	[ -z "$service_name" ] && service_name=$(find_first_uci_section on-core services "service=gw" "host=$host")
	echo "$service_name"

}


# Bewege ein Gateway in der Liste
move_top()	{ move_service_top	"$1" gw ugw; }
move_up()	{ move_service_up	"$1" gw ugw; }
move_down()	{ move_service_down	"$1" gw ugw; }


#TODO: neues Service-Konzept
add_gw()
{
	trap "error_trap add_gw $*" $GUARD_TRAPS
	local ipaddr=$1
	local index=1;
	while [ -n "$(uci_get "on-openvpn.gate_$((index++))")" ]; do true; done
	uci -q set on-openvpn.gate_${index}=gateway;
	uci -q set on-openvpn.gate_${index}.ipaddr=$ipaddr;
	# commit after every change to prevent uci memory problems
	uci commit on-openvpn
}


#TODO: neues Service-Konzept
del_gw()
{
	trap "error_trap del_gw $*" $GUARD_TRAPS
	local position=$1
	uci -q del on-openvpn.gate_$position;
	while [ -n "$(uci_get "on-openvpn.gate_$((++position))")" ]; do
		uci -q rename "on-openvpn.gate_$position=gate_$((position-1))"
	done
	# commit after every change to prevent uci memory problems
	uci commit on-openvpn
}

toggle_etx()
{
	trap "error_trap toggle_etx $*" $GUARD_TRAPS
	local sort_by_etx=$(uci_get on-openvpn.gateways.vpn_sort_criteria);
	[ "$sort_by_etx" = "etx" ] && sort_by_etx="metric" || sort_by_etx="etx"
	uci -q set on-openvpn.gateways.vpn_sort_criteria=$sort_by_etx;
	# commit after every change to prevent uci memory problems
	uci commit on-openvpn
}

toggle_autosearch() {
	trap "error_trap toggle_autosearch $*" $GUARD_TRAPS
	local autosearch=$(uci_get on-openvpn.gateways.autosearch)
	[ "$autosearch" = "on" ] && autosearch="off" || autosearch="on"
	uci -q set on-openvpn.gateways.autosearch=$autosearch
	# commit after every change to prevent uci memory problems
	uci commit on-openvpn
}


ACTION=help
[ $# -ge 1 ] && ACTION=$1

case "$ACTION" in
	move_top|move_up|move_down)
		[ $# -ne 2 ] && echo >&2 "ERROR: '$ACTION' requires one more parameter" && exit 1
		host="$2"
		service_name=$(_get_gateway_service_from_ip "$host")
		if [ -n "$service_name" ]; then
			"$ACTION" "$service_name"
		else
			echo >&2 "No gateway service related to host '$host' found."
		fi
	;;
	add_gw|del_gw)
		[ $# -ne 2 ] && echo >&2 "ERROR: '$ACTION' requires one more parameter" && exit 1
		"$ACTION" "$2"
		print_status
	;;
	status)
		print_status
	;;
	start|stop|restart)
		# TODO rewrite stuff below because "stop_instance" is not supported anymore
		#INSTANCE=opennet_user
		#. "$IPKG_INSTROOT/lib/functions.sh"
		#. "$IPKG_INSTROOT/lib/functions/service.sh"
		#. /etc/init.d/openvpn

		#INSTANCE=opennet_user
		#[ "$1" = "restart" -o "$1" = "stop" ] && stop_instance "$INSTANCE"
		#[ "$1" = "restart" -o "$1" = "start" ] && start_instance "$INSTANCE"
		
		# Temporary and not so nice replacement for function above
		[ "$ACTION" = "restart" -o "$1" = "stop" ] && /etc/init.d/openvpn stop
		[ "$ACTION" = "restart" -o "$1" = "start" ] && /etc/init.d/openvpn start 
	;;
	help|--help)
		print_usage
	;;
	*)
		print_usage >&2
		exit 1
	;;
esac

exit 0

