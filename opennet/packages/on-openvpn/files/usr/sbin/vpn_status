#!/bin/sh
#
# Opennet Firmware
# 
# Copyright 2010 Rene Ejury <opennet@absorb.it>
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# 	http://www.apache.org/licenses/LICENSE-2.0
# 

#set -x

# include helper functions
. "${IPKG_INSTROOT:-}/usr/lib/opennet/on-helper.sh"

print_status()
{
	local autosearch=$(uci_get on-openvpn.gateways.autosearch)
	local current_gw_ipaddr=$(uci_get openvpn.opennet_user.remote)
	local index=1
	local gw_ipaddr
	local age
	local status

	echo -n "autosearch: $autosearch"
	[ "$autosearch" = "on" ] && echo -e -n "\tsort by: $(uci_get on-openvpn.gateways.vpn_sort_criteria)"
	echo
	echo
	echo -e "\nno.\tactive\tIP\t\tDist/ETX\tVPN\tAge"
	echo '/route' | nc localhost 2006 > /tmp/olsrd_txtinfo_vpnstatus.txt
	while [ -n "$(uci_get on-openvpn.gate_$index)" ] ; do
		gw_ipaddr=$(uci_get on-openvpn.gate_$index.ipaddr);
		age=$(get_gateway_value "$gw_ipaddr" age)
		status=$(get_gateway_value "$gw_ipaddr" status)
		[ "$gw_ipaddr" = "$current_gw_ipaddr" ] && active="*" || active=""
		dist=$(awk 'BEGIN {FS="[/\x09]+"} $1=="'$gw_ipaddr'" {print $4"/"$5;}' /tmp/olsrd_txtinfo_vpnstatus.txt);
		[ ${#dist} -lt 8 ] && dist="$dist\t"
		echo -e "$index\t$active\t$gw_ipaddr\t$dist\t$status\t$age"
		: $((index++))
	done
	echo

	rm /tmp/olsrd_txtinfo_vpnstatus.txt
}

print_usage()
{
	echo
	echo "*** vpn_status supports the following options: ***"
	echo "toggle_auto    - toggle the autosearch mode"
	echo "toggle_etx     - toggle sort by etx or hops"
	echo "add_gw \$IP     - manually add a gateway"
	echo "del_gw \$POS    - delete a existing gateway"
	echo "move_top \$POS  - move a gateway to the top of the priority list"
	echo "status         - show all VPN gateways and their status"
	echo "start          - start the VPN tunnel"
	echo "stop           - stop the VPN tunnel"
	echo "restart        - restart the VPN tunnel"
}

# Bewege ein Gateway an die Spitze der Liste
# Nur relevant bei manueller Gateway-Sortierung.
move_top()
{
	local position=$1
	uci -q rename on-openvpn.gate_$position="gate_MOVETOP";
	while [ $((position--)) -ge 1 ] ; do
		uci -q rename on-openvpn.gate_$position="gate_"$((position+1));
	done
	uci -q rename on-openvpn.gate_MOVETOP="gate_1"
	# commit after every change to prevent uci memory problems
	uci commit on-openvpn
}

add_gw()
{
	local ipaddr=$1
	local index=1;
	while [ -n "$(uci_get "on-openvpn.gate_$((index++))")" ]; do true; done
	uci -q set on-openvpn.gate_${index}=gateway;
	uci -q set on-openvpn.gate_${index}.ipaddr=$ipaddr;
	# commit after every change to prevent uci memory problems
	uci commit on-openvpn
}

del_gw()
{
	local position=$1
	uci -q del on-openvpn.gate_$position;
	while [ -n "$(uci_get "on-openvpn.gate_$((++position))")" ]; do
		uci -q rename "on-openvpn.gate_$position=gate_$((position-1))"
	done
	# commit after every change to prevent uci memory problems
	uci commit on-openvpn
}

toggle_etx()
{
	local sort_by_etx=$(uci_get on-openvpn.gateways.vpn_sort_criteria);
	[ "$sort_by_etx" = "etx" ] && sort_by_etx="metric" || sort_by_etx="etx"
	uci -q set on-openvpn.gateways.vpn_sort_criteria=$sort_by_etx;
	# commit after every change to prevent uci memory problems
	uci commit on-openvpn
}

toggle_autosearch() {
	local autosearch=$(uci_get on-openvpn.gateways.autosearch)
	[ "$autosearch" = "on" ] && autosearch="off" || autosearch="on"
	uci -q set on-openvpn.gateways.autosearch=$autosearch
	# commit after every change to prevent uci memory problems
	uci commit on-openvpn
}


ACTION=help
[ $# -ge 1 ] && ACTION=$1

case "$ACTION" in
	move_top|add_gw|del_gw)
		[ $# -ne 2 ] && echo >&2 "ERROR: '$ACTION' requires one more parameter" && exit 1
		"$ACTION" "$2"
		print_status
	;;
	toggle_etx|toggle_auto)
		"$ACTION"
		print_status
	;;
	status)
		print_status
	;;
	set_gateway_flag)
		[ $# -ne 4 ] && echo >&2 "ERROR: '$ACTION' requires three more parameters" && exit 1
		# Parameter: GW-IP FLAG VALUE
		set_gateway_value "$2" "$3" "$4"
	;;
	get_gateway_flag)
		[ $# -ne 3 ] && echo >&2 "ERROR: '$ACTION' requires two more parameters" && exit 1
		# Parameter: GW-IP FLAG
		# e.g. "age" or "status" (used by the web-interface)
		get_gateway_value "$2" "$3"
	;;
	start|stop|restart)
		# TODO rewrite stuff below because "stop_instance" is not supported anymore
		#INSTANCE=opennet_user
		#. "$IPKG_INSTROOT/lib/functions.sh"
		#. "$IPKG_INSTROOT/lib/functions/service.sh"
		#. /etc/init.d/openvpn

		#INSTANCE=opennet_user
		#[ "$1" = "restart" -o "$1" = "stop" ] && stop_instance "$INSTANCE"
		#[ "$1" = "restart" -o "$1" = "start" ] && start_instance "$INSTANCE"
		
		# Temporary and not so nice replacement for function above
		[ "$ACTION" = "restart" -o "$1" = "stop" ] && /etc/init.d/openvpn stop
		[ "$ACTION" = "restart" -o "$1" = "start" ] && /etc/init.d/openvpn start 
	;;
	help|--help)
		print_usage
	;;
	*)
		print_usage >&2
		exit 1
	;;
esac

exit 0

