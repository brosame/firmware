#!/bin/sh
#
# Opennet Firmware
#
# Copyright 2010 Rene Ejury <opennet@absorb.it>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# 	http://www.apache.org/licenses/LICENSE-2.0
#

. "${IPKG_INSTROOT:-}/usr/lib/opennet/on-helper.sh"


print_status() {
	local service_name
	local host
	local wan_status
	local vpn_status
	local mtu_status
	local priority
	local offset
	local active
	local format_string
	format_string='%-6s %-32s %11s %3s %3s %3s\n'

	# shellcheck disable=SC2059
	printf "$format_string" "active" "Hostname" "Priority" "WAN" "VPN" "MTU"
	for service_name in $(get_services "mesh" | sort_services_by_priority); do
		host=$(get_service_value "$service_name" "host")
		if uci_is_true "$(get_service_value "$service_name" "disabled" "false")"; then
			# der Dienst wird ignoriert
			# shellcheck disable=SC2059
			printf "$format_string" "" "$host" "disabled" "" "" ""
		else
			priority=$(get_service_value "$service_name" "priority")
			offset=$(get_service_value "$service_name" "offset" "0")
			[ "$offset" -gt 0 ] && offset="+$offset"
			[ "$offset" -ne 0 ] && priority="($offset) $priority"
			connection_state=$(get_openvpn_service_state "$service_name")
			if [ "$connection_state" = "active" ]; then
				active="*"
			elif [ "$connection_state" = "connecting" ]; then
				active="?"
			else
				active=""
			fi
			wan_status=$(if uci_is_true "$(get_service_value "$service_name" "wan_status" "false")"; then echo " y "; fi)
			vpn_status=$(if uci_is_true "$(get_service_value "$service_name" "vpn_status" "false")"; then echo " y "; fi)
			mtu_status=$(if uci_is_true "$(get_service_value "$service_name" "mtu_status" "false")"; then echo " y "; fi)
			# shellcheck disable=SC2059
			printf "$format_string" "   $active" "$host" "$priority" "$wan_status" "$vpn_status" "$mtu_status"
		fi
	done
}


print_usage() {
	echo
	echo "*** ugw_status supports the following actions: ***"
	echo "check_gateway    - test the usability of a mesh gateway"
	echo "status           - show all mesh gateways and their status"
	echo "start            - start the mesh tunnel"
	echo "stop             - stop the mesh tunnel"
	echo "restart          - restart the mesh tunnel"
}



ACTION=help
[ $# -ge 1 ] && ACTION=$1

case "$ACTION" in
	check_gateway)
		[ $# -gt 2 ] && echo >&2 "ERROR: '$ACTION' requires one more parameter" && exit 1
		for service_name in $(get_services "mesh" | filter_services_by_value "host" "$2"); do
			echo "$service_name" | run_cyclic_service_tests "is_mesh_gateway_usable" "0" "0"
			for key in wan vpn mtu; do
				printf '%s: %s\n' "$key" "$(get_service_value "$service_name" "${key}_status")"
			done
			printf '%s: %s\n' "result" "$(get_service_value "$service_name" "status")"
		done
	;;
	status)
		print_status
	;;
	start|stop|restart)
		# leider ist diese Funktion etwas grob: eventuell koennen mehr Instanzen beeinflusst werden, als gewollt
		/etc/init.d/openvpn "$ACTION"
	;;
	help|--help)
		print_usage
	;;
	*)
		print_usage >&2
		exit 1
	;;
esac

exit 0
