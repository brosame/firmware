#!/bin/sh /etc/rc.common
#
# Opennet Firmware
#
# Copyright 2010 Rene Ejury <opennet@absorb.it>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#

START=31

start() {
	# include this file only during "start" ("enable" or "disable" may use IPKG_INSTROOT)
	. "${IPKG_INSTROOT:-}/usr/lib/opennet/on-helper.sh"

	# while reconfiguring, on_id is usually not set. Anyway, just try to read it...
	on_id=$(uci_get on-core.settings.on_id "$(get_on_core_default on_id_preset)")
	on_ipschema=$(get_on_core_default on_ipschema)
	free_ipschema=$(get_on_wifidog_default free_ipschema)
	free_netmask=$(get_on_wifidog_default free_netmask)

	free_ipaddr=$(get_on_ip "$on_id" "$free_ipschema" 0)
	free_ipaddr_first=$(get_on_ip "0.1" "$free_ipschema" 0)
	on_ipaddr=$(get_on_ip "$on_id" "$on_ipschema" 0)

	if [ -z "$(uci_get network.free)" ]; then
		local batch
		
		# configure opennet dhcp/wifidog wifi
		append batch "set network.free=interface${N}"
		append batch "set network.free.ifname=none${N}"
		append batch "set network.free.type=bridge${N}"
		
		append batch "set network.free.proto=static${N}"
		append batch "set network.free.netmask=${free_netmask}${N}"
		append batch "set network.free.defaultroute=0${N}"
		append batch "set network.free.peerdns=0${N}"
		append batch "set network.free.ipaddr=${free_ipaddr}${N}"

		append batch "set network.0=alias${N}"
		append batch "set network.0.proto=static${N}"
		append batch "set network.0.interface=free${N}"
		append batch "set network.0.ipaddr=${free_ipaddr_first}${N}"
		append batch "set network.0.netmask=${free_netmask}${N}"

		append batch "set dhcp.@dnsmasq[0].nonwildcard=1${N}"

		append batch "set luci.flash_keep.wifidog=/etc/wifidog.conf${N}"

		echo "$batch${N}commit network${N}commit dhcp${N}commit luci${N}" | uci -q batch

		# Firewall-Zone fuer das offene Netzwerk einrichten
		uci_prefix=firewall.$(uci add firewall zone)
		uci set "${uci_prefix}.name=$ZONE_FREE"
		uci set "${uci_prefix}.network=$NETWORK_FREE"
		uci set "${uci_prefix}.forward=REJECT"
		uci set "${uci_prefix}.input=ACCEPT"
		uci set "${uci_prefix}.output=ACCEPT"

		section=$(uci add firewall forwarding)
		uci set "firewall.$section.src=$ZONE_FREE"
		uci set "firewall.$section.dest=$ZONE_TUNNEL"

		section=$(uci add firewall forwarding)
		uci set "firewall.$section.src=$ZONE_LOCAL"
		uci set "firewall.$section.dest=$ZONE_FREE"

		section=$(uci add firewall redirect)
		uci set "firewall.$section.src=$ZONE_FREE"
		uci set "firewall.$section.proto=udp"
		uci set "firewall.$section.src_dport=67"
		uci set "firewall.$section.target=DNAT"
		uci set "firewall.$section.src_port=67"
		uci set "firewall.$section.dest_ip=${free_ipaddr}"
		uci set "firewall.$section.src_dip=${on_ipaddr}"
		uci commit firewall
	else	# fix pre 0.3-6 version bug
		no=0
		while [ -n "$(uci_get firewall.@redirect[$no])" ]; do
			src=$(uci_get firewall.@redirect[$no].src);
			proto=$(uci_get firewall.@redirect[$no].proto);
			src_dport=$(uci_get firewall.@redirect[$no].src_dport);
			target=$(uci_get firewall.@redirect[$no].target);
			src_port=$(uci_get firewall.@redirect[$no].src_port);
			if [ "$src" == "opennet" ] && [ "$proto" == "udp" ] && [ "$src_dport" == "67" ] && [ "$target" == "DNAT" ] && [ "$src_port" == "67" ]; then
				uci set "firewall.@redirect[$no].dest_ip=${free_ipaddr}"
				uci set "firewall.@redirect[$no].src_dip=${on_ipaddr}"
				uci commit firewall
				break
			fi
			: $((no++))
		done
	fi


	# copy our template if the original wifidog.conf seems to be present
	grep -q "GatewayInterface br-lan" /etc/wifidog.conf && cp /etc/wifidog.conf.opennet_template /etc/wifidog.conf

	# There are three possibilities:
	#  1) no GatewayID is set (wifidog is disabled - it will not start)
	#  2) the current AP-based name is set
	#  3) an outdated AP-based name is set
	# change current ID if starting with AP or not set
	conf_file=/etc/wifidog.conf
	current_wifidog_name=$(grep "^GatewayID" "$conf_file" | awk '{print $2}')
	wanted_wifidog_name="AP$on_id"

	# do not touch the config file if the "marker" line was removed
	if grep -q "OPENNET FIRMWARE" "$conf_file"; then
		if [ "$current_wifidog_name" != "$wanted_wifidog_name" ]; then
			if grep -q "GatewayID" "$conf_file"; then
				sed -i "s/^.*GatewayID.*$/GatewayID $wanted_wifidog_name/" "$conf_file"
			else
				echo "GatewayID $wanted_wifidog_name" >>"$conf_file"
			fi
		fi
	fi

	# update the dhcp-fwd.conf file if there were changes
	tmp_conf_file=/tmp/dhcp-fwd.conf.tmp
	dest_conf_file=/etc/dhcp-fwd.conf
	cp /etc/dhcp-fwd.conf.opennet_template "$tmp_conf_file"
	uci_prefix=$(find_first_uci_section firewall zone "name=$ZONE_MESH")
	for network in $(uci_get "${uci_prefix}.network"); do
		ifname=$(uci_get "network.$network.ifname")
		[ -n "$ifname" -a "$ifname" != "none" ] && echo "if $ifname false true true" >>"$tmp_conf_file"
	done
	if cmp -s "$tmp_conf_file" "$dest_conf_file"; then
		rm "$tmp_conf_file"
	else
		mv "$tmp_conf_file" "$dest_conf_file"
	fi

	exit 0
}

