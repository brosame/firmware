#!/bin/sh
#
# Show currently used channel of wifi enabled devices.
# Author: Lars Kruse, devel@sumpfralle.de
# License: GPL v3 or later
#
# Requirements:
#  * "iwinfo" tool
#  * root privileges (for "iw" and "iwinfo")
#
# Magic markers
#%# capabilities=autoconf suggest
#%# family=auto


set -eu


clean_fieldname() {
	echo "$1" | sed 's/^\([^A-Za-z_]\)/_\1/; s/[^A-Za-z0-9_]/_/g'
}


get_wifi_interfaces() {
	iwinfo | grep "^[a-zA-Z]" | awk '{print $1}'
}

get_wifi_peers() {
	# return MAC of peer, signal and noise
	iwinfo "$1" assoclist | grep "^[0-9a-fA-F]" | awk '{print $1,$2,$5}'
}

get_ip_for_mac() {
	local ip
	ip=$(grep -iw "$1" /proc/net/arp | awk '{print $1}' | sort | head -1)
	[ -n "$ip" ] && echo "$ip" && return 0
	# no IP found - return MAC instead
	echo "$1"
}

get_selected_interface() {
	# filename ends with "_"? Exit script with error immediately.
	[ "$0" != "${0%_}" ] && echo >&2 "Failed to parse wifi interface from filename" && exit 1
	# pick the last segment after the final "_"
	echo "$0" | sed 's/.*_//'
}


ACTION="${1:-}"

case "$ACTION" in
	config)
		wifi=$(get_selected_interface)
		echo "graph_title Wireless signal quality - $wifi"
		echo "graph_args --upper-limit 0"
		echo "graph_vlabel Signal and noise [dBm]"
		echo "graph_category network"
		echo "graph_info This graph shows the signal and noise for all wifi peers"
		echo "noise.label Noise floor"
		echo "noise.draw LINE"
		# sub graphs for all peers
		get_wifi_peers "$wifi" | while read mac signal noise; do
			fieldname=$(clean_fieldname "peer_${mac}")
			peer=$(get_ip_for_mac "$mac")
			echo "signal_${fieldname}.label $peer"
			echo "signal_${fieldname}.draw LINE"
		done
		;;
	autoconf)
		[ -z "$(get_wifi_interfaces)" ] && echo "no (no wifi interfaces found)" && exit 1
		echo "yes"
		;;
	suggest)
		get_wifi_interfaces
		;;
	"")
		wifi=$(get_selected_interface)
		peer_data=$(get_wifi_peers "$wifi")
		echo "$peer_data" | while read mac signal noise; do
			# ignore empty datasets
			[ -z "$signal$noise" ] && continue
			fieldname=$(clean_fieldname "peer_${mac}")
			echo "signal_${fieldname}.value $signal"
		done
		# output the first valid noise value (it should be the same for all peers)
		echo "$peer_data" | while read mac signal noise; do
			[ -z "$noise" ] && continue
			echo "noise.value $noise"
			# output only one value
			break
		done
		;;
	*)
		echo >&2 "Invalid action (valid: config)"
		echo >&2
		;;
esac
