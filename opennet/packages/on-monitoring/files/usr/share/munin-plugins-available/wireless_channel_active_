#!/bin/sh
#
# Show currently used channel of wifi enabled devices.
# Author: Lars Kruse, devel@sumpfralle.de
# License: GPL v3 or later
#
# Requirements:
#  * "iwinfo" tool
#  * root privileges (for "iw" and "iwinfo")
#
# Magic markers
#%# capabilities=autoconf suggest
#%# family=auto


set -eu


get_physicial_interfaces() {
	iwinfo | grep "PHY name:" | sed 's/^.*PHY name: \+\(.*\)$/\1/'
}

get_physicial_interface_current_channel() {
	iwinfo "$1" info | grep Channel | sed 's/^.*Channel: \+\([0-9]\+\) .*$/\1/'
}

get_physical_interfaces_channel_descriptions() {
	# return: CHANNEL CHANNEL_DESCRIPTION
	# e.g.: "104 5.520 GHz (Channel 104)"
	iwinfo "$1" freqlist | sed 's/^[^0-9]*//' | sed 's/^.*Channel \+\([0-9]\+\).*$/\1 \0/'
}

get_selected_physical_interface() {
	# The physical interface name should be safe (phyX) and needs no cleanup.
	# pick the last segment after the final "_"
	echo "$0" | sed 's/.*_//'
}


do_config() {
	local phy
	local draw_type
	phy=$(get_selected_physical_interface)
	echo "graph_title Wireless channel usage - $phy"
	echo "graph_args --base 1000 -r --lower-limit 0 --upper-limit 100"
	echo "graph_vlabel Channel usage by time in percent"
	echo "graph_category network"
	echo "graph_info This graph shows the currently used channel of your WiFi device(s)"
	draw_type="AREA"
	get_physical_interfaces_channel_descriptions "$phy" | while read -r channel description; do
		fieldname="channel_${channel}"
		echo "${fieldname}.label $description"
		echo "${fieldname}.draw $draw_type"
		# percent scaling
		echo "${fieldname}.cdef 100,${fieldname},*"
		draw_type="STACK"
	done
}


do_fetch() {
	local phy
	local current_channel
	phy=$(get_selected_physical_interface)
	current_channel=$(get_physicial_interface_current_channel "$phy")
	get_physical_interfaces_channel_descriptions "$phy" | while read -r channel description; do
		[ "$current_channel" = "$channel" ] && value=1 || value=0
		echo "channel_${channel}.value $value"
	done
}


ACTION="${1:-}"

case "$ACTION" in
	config)
		do_config
		;;
	autoconf)
		if [ -z "$(get_physicial_interfaces)" ]; then
			echo "no (no wifi interfaces found)"
		else
			echo "yes"
		fi
		;;
	suggest)
		get_physicial_interfaces
		;;
	"")
		do_fetch
		;;
	*)
		echo >&2 "Invalid action (valid: config)"
		echo >&2
		;;
esac
