Deactivate messages "not enough packets for chirp".

Author: Kai-Uwe

Index: on_firmware/openwrt/package/kernel/mac80211/patches/ath/495_silent_chirp.patch
===================================================================
--- /dev/null
+++ on_firmware/openwrt/package/kernel/mac80211/patches/ath/495_silent_chirp.patch
@@ -0,0 +1,75 @@
+--- a/drivers/net/wireless/ath/ath9k/dfs.c
++++ b/drivers/net/wireless/ath/ath9k/dfs.c
+@@ -112,16 +112,16 @@
+ 		if (num_fft_packets == 0)
+ 			return false;
+ 
+-		ath_dbg(common, DFS, "HT40: datalen=%d, num_fft_packets=%d\n",
+-			datalen, num_fft_packets);
++		//ath_dbg(common, DFS, "HT40: datalen=%d, num_fft_packets=%d\n",
++			//datalen, num_fft_packets);
+ 		if (num_fft_packets < FFT_NUM_SAMPLES) {
+-			ath_dbg(common, DFS, "not enough packets for chirp\n");
++			//ath_dbg(common, DFS, "not enough packets for chirp\n");
+ 			return false;
+ 		}
+ 		/* HW sometimes adds 2 garbage bytes in front of FFT samples */
+ 		if ((datalen % sizeof(*fft)) == 2) {
+ 			fft = (struct ath9k_dfs_fft_40 *) (data + 2);
+-			ath_dbg(common, DFS, "fixing datalen by 2\n");
++			//ath_dbg(common, DFS, "fixing datalen by 2\n");
+ 		}
+ 		if (IS_CHAN_HT40MINUS(ah->curchan))
+ 			swap(is_ctl, is_ext);
+@@ -134,18 +134,18 @@
+ 		int num_fft_packets = datalen / sizeof(*fft);
+ 		if (num_fft_packets == 0)
+ 			return false;
+-		ath_dbg(common, DFS, "HT20: datalen=%d, num_fft_packets=%d\n",
+-			datalen, num_fft_packets);
++		//ath_dbg(common, DFS, "HT20: datalen=%d, num_fft_packets=%d\n",
++			//datalen, num_fft_packets);
+ 		if (num_fft_packets < FFT_NUM_SAMPLES) {
+-			ath_dbg(common, DFS, "not enough packets for chirp\n");
++			//ath_dbg(common, DFS, "not enough packets for chirp\n");
+ 			return false;
+ 		}
+ 		/* in ht20, this is a 6-bit signed number => shift it to 0 */
+ 		for (i = 0; i < FFT_NUM_SAMPLES; i++)
+ 			max_bin[i] = fft_max_index(fft[i].lower_bins) ^ 0x20;
+ 	}
+-	ath_dbg(common, DFS, "bin_max = [%d, %d, %d, %d]\n",
+-		max_bin[0], max_bin[1], max_bin[2], max_bin[3]);
++	//ath_dbg(common, DFS, "bin_max = [%d, %d, %d, %d]\n",
++		//max_bin[0], max_bin[1], max_bin[2], max_bin[3]);
+ 
+ 	/* Check for chirp attributes within specs
+ 	 * a) delta of adjacent max_bins is within range
+@@ -158,21 +158,21 @@
+ 
+ 		/* ensure gradient is within valid range */
+ 		if (abs(delta) < BIN_DELTA_MIN || abs(delta) > BIN_DELTA_MAX) {
+-			ath_dbg(common, DFS, "CHIRP: invalid delta %d "
+-				"in sample %d\n", delta, i);
++			//ath_dbg(common, DFS, "CHIRP: invalid delta %d "
++				//"in sample %d\n", delta, i);
+ 			return false;
+ 		}
+ 		if (i == 0)
+ 			goto done;
+ 		ddelta = delta - prev_delta;
+ 		if (abs(ddelta) > MAX_DIFF) {
+-			ath_dbg(common, DFS, "CHIRP: ddelta %d too high\n",
+-				ddelta);
++			//ath_dbg(common, DFS, "CHIRP: ddelta %d too high\n",
++				//ddelta);
+ 			return false;
+ 		}
+ done:
+-		ath_dbg(common, DFS, "CHIRP - %d: delta=%d, ddelta=%d\n",
+-			i, delta, ddelta);
++		//ath_dbg(common, DFS, "CHIRP - %d: delta=%d, ddelta=%d\n",
++			//i, delta, ddelta);
+ 		prev_delta = delta;
+ 	}
+ 	return true;
